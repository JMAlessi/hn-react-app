{"version":3,"sources":["selectors/selectFields.js","services/hnApi.js","styles/StoryStyles.js","components/Story.js","mappers/mapTime.js","styles/StoryContainerStyles.js","hooks/useInfiniteScroll.js","constants/index.js","utils/debounce.js","containers/StoriesContainer.js","serviceWorker.js","index.js","App.js"],"names":["selectFields","id","by","url","time","title","baseUrl","topStoriesUrl","storyUrl","StoryWrapper","styled","section","StoryTitle","h1","StoryMeta","div","StoryMetaElement","span","props","color","Story","memo","storyId","useState","story","setStory","useEffect","a","async","axios","get","then","data","result","getStory","data-testid","href","timestamp","seconds","Math","floor","Date","interval","mapTime","GlobalStyle","createGlobalStyle","StoriesContainerWrapper","main","useInfiniteScroll","loading","setLoading","count","setCount","handleScroll","func","wait","immediate","args","timeout","callNow","clearTimeout","setTimeout","apply","debounce","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener","StoriesContainer","storyIds","setStoryIds","getStoryIds","console","log","data-test-id","slice","map","key","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","render","getElementById","URL","process","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ecb5d4a3.chunk.js","sourcesContent":["export const selectFields = ({ id, by, url, time, title } = {}) => ({\n  id,\n  by,\n  url,\n  time,\n  title\n});\n","import axios from \"axios\";\nimport { selectFields } from \"../selectors/selectFields.js\";\n\nexport const baseUrl = \"https://hacker-news.firebaseio.com/v0/\";\nexport const topStoriesUrl = `${baseUrl}topstories.json`;\nexport const storyUrl = `${baseUrl}item/`;\n\nexport const getStory = async storyId => {\n  const result = await axios\n    .get(`${storyUrl + storyId}.json`)\n    .then(({ data }) => data && selectFields(data));\n\n  return result;\n};\n\nexport const getStoryIds = async () => {\n  const result = await axios.get(topStoriesUrl).then(({ data }) => data);\n\n  return result;\n};\n","import styled from \"styled-components\";\n\nexport const StoryWrapper = styled.section`\n  padding-top: 10px;\n  margin-bottom: 20px;\n  border-top: 1px solid #ccc;\n\n  &:first-of-type {\n    border-top: 0;\n  }\n\n  &:last-of-type {\n    margin-bottom: 0;\n    padding-bottom: 0;\n  }\n`;\n\nexport const StoryTitle = styled.h1`\n  margin-bottom: 5px;\n  font-size: 18px;\n  line-height: 1.8;\n  margin: 0;\n  text-decoration: none;\n\n  a {\n    color: #0080ff;\n    background-color: #fce205;\n  }\n  a:hover {\n    color: #0f52ba;\n  }\n`;\n\nexport const StoryMeta = styled.div`\n  font-style: italic;\n\n  > span:first-child {\n    margin-right: 10px;\n  }\n\n  > span:not(:first-child):before {\n    content: \"â€£\";\n    margin: 0 7px;\n  }\n\n  .story__meta-bold {\n    font-weight: bold;\n  }\n`;\n\nexport const StoryMetaElement = styled.span`\n  font-weight: bold;\n  color: ${props => props.color || \"red\"};\n`;\n","import React, { useState, useEffect, memo } from \"react\";\nimport { getStory } from \"../services/hnApi.js\";\nimport {\n  StoryWrapper,\n  StoryTitle,\n  StoryMeta,\n  StoryMetaElement\n} from \"../styles/StoryStyles.js\";\nimport { mapTime } from \"../mappers/mapTime.js\";\n\nexport const Story = memo(function Story({ storyId }) {\n  const [story, setStory] = useState({});\n\n  useEffect(() => {\n    getStory(storyId).then(data => data && data.url && setStory(data));\n  }, [storyId]);\n\n  return story && story.url ? (\n    <StoryWrapper data-testid=\"story\">\n      <StoryTitle>\n        <a href={story.url}>{story.title}</a>\n      </StoryTitle>\n\n      <StoryMeta>\n        <span data-testid=\"story-by\">\n          <StoryMetaElement color=\"#222\">By: </StoryMetaElement>\n          {story.by}\n        </span>\n        <span data-testid=\"story-time\">\n          <StoryMetaElement color=\"#222\">Posted: </StoryMetaElement>\n          {mapTime(story.time)}\n        </span>\n      </StoryMeta>\n    </StoryWrapper>\n  ) : null;\n});\n","export const mapTime = timestamp => {\n  const seconds = Math.floor((new Date() - timestamp * 1000) / 1000);\n\n  let interval = Math.floor(seconds / 31536000);\n\n  if (interval > 1) {\n    return `${interval} years`;\n  }\n  interval = Math.floor(seconds / 2592000);\n\n  if (interval > 1) {\n    return `${interval} months`;\n  }\n  interval = Math.floor(seconds / 86400);\n\n  if (interval > 1) {\n    return `${interval} days`;\n  }\n  interval = Math.floor(seconds / 3600);\n\n  if (interval > 1) {\n    return `${interval} hours`;\n  }\n  interval = Math.floor(seconds / 60);\n\n  if (interval > 1) {\n    return `${interval} minutes`;\n  }\n\n  return `${Math.floor(seconds)} seconds`;\n};\n","import styled, { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        -webkit-box-sizing: border-box;\n                box-sizing: border-box;\n    }\n    *, *:before, *:after {\n        -webkit-box-sizing: inherit;\n                box-sizing: inherit;\n    }\n\n    body {\n        margin: 0;\n        padding: 0;\n        line-height: 1;\n        color: #222;\n        background-color: #eee;\n        font-family: Arial, Helvetica, sans-serif;\n        font-size: 18px;\n    }\n\n    ul {\n        margin: 0;\n        padding: 0;\n    }\n`;\n\nexport const StoriesContainerWrapper = styled.main`\n  max-width: 1140px;\n  padding: 20px 15px;\n  margin: auto;\n`;\n","import { useState, useEffect } from \"react\";\nimport { STORY_INCREMENT, MAX_STORIES } from \"../constants\";\nimport { debounce } from \"../utils/debounce.js\";\n\nexport const useInfiniteScroll = () => {\n  const [loading, setLoading] = useState(false);\n  const [count, setCount] = useState(STORY_INCREMENT);\n\n  const handleScroll = debounce(() => {\n    if (\n      window.innerHeight + document.documentElement.scrollTop !==\n        document.documentElement.offsetHeight ||\n      loading\n    ) {\n      return false;\n    }\n\n    setLoading(true);\n  }, 10);\n\n  useEffect(() => {\n    if (!loading) return;\n\n    if (count + STORY_INCREMENT >= MAX_STORIES) {\n      setCount(MAX_STORIES);\n    } else {\n      setCount(count + STORY_INCREMENT);\n    }\n\n    setLoading(false);\n  }, [count, loading]);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [handleScroll]);\n\n  return { count };\n};\n","export const MAX_STORIES = 10;\nexport const STORY_INCREMENT = 30;\n","export const debounce = (func, wait, immediate, args) => {\n  let timeout;\n\n  return () => {\n    const context = this;\n    const callNow = immediate && !timeout;\n    const later = () => {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n\n    if (callNow) func.apply(context, args);\n  };\n};\n","import React, { useEffect, useState } from \"react\";\nimport { getStoryIds, getStory } from \"../services/hnApi.js\";\nimport { Story } from \"../components/Story.js\";\nimport {\n  GlobalStyle,\n  StoriesContainerWrapper\n} from \"../styles/StoryContainerStyles.js\";\nimport { useInfiniteScroll } from \"../hooks/useInfiniteScroll.js\";\n\nexport const StoriesContainer = () => {\n  const { count } = useInfiniteScroll();\n  const [storyIds, setStoryIds] = useState([]);\n\n  useEffect(() => {\n    getStoryIds().then(data => setStoryIds(data));\n    console.log(\"count\", count);\n  }, [count]);\n\n  return (\n    <>\n      <GlobalStyle />\n      <StoriesContainerWrapper data-test-id=\"stories-container\">\n        <h1>Hacker News Stories:</h1>\n        {storyIds.slice(0, count).map(storyId => (\n          <Story key={storyId} storyId={storyId} />\n        ))}\n      </StoriesContainerWrapper>\n    </>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' }\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n  ","import React from 'react';\nimport { render } from 'react-dom';\nimport { App } from './App.js';\nimport * as serviceWorker from './serviceWorker.js';\n\nrender(<App />, document.getElementById('root'));\n\nserviceWorker.register();","import React from \"react\";\nimport { StoriesContainer } from \"./containers/StoriesContainer.js\";\n\nexport const App = () => <StoriesContainer />;\n"],"sourceRoot":""}